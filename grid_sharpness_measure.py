import matplotlib
matplotlib.use('Agg')
from PIL import Image
import numpy as np
import cv2
import os
import matplotlib.pyplot as plt
from skimage import color
import time 
from os import listdir
from os.path import isfile, join
    

## contains the folder location of the images generated by the GAN 
folderloc = '/data/mb/fake/fakebedrooms_64'
## contains the fullpath name of the plot png  
targetGraphNameWithExt = '/data/shared/suhit/bedroom_grid_sharpness_plot.png' 
plot_title = 'Image Index vs Sharpness for Bedroom'

# checks whether an image is grayscale or not
def isGrayScale(img):
    if(len(img.shape)<3):
        return True
    else :
        return False

#https://stackoverflow.com/questions/6646371/detect-which-image-is-sharper
def sharpness(img): 
    if not isGrayScale(img):
        img = color.rgb2gray(img)
    array = np.array(img, dtype=np.int32)
    gy, gx = np.gradient(array)
    gnorm = np.sqrt(gx**2 + gy**2)
    sharpness = np.average(gnorm)
    return sharpness  

def numeric_chars2(x):
    y = x[5:-4]
    return(int(y))

# function to normalize any list and return a list
def normalizeList(lst):
    normlst = []
    minlst = min(lst)
    maxlst = max(lst)
    for i in lst:
        normlst.append((i-minlst)/(maxlst-minlst))
    return normlst

file_list = os.listdir(folderloc)
l1 = sorted(file_list, key = numeric_chars2)

print("start iterating over input images -----------------")
t_ini = time.time()
size = 0
lst = []
sharpnessFull = []
nameList = []
for ip in l1:
    nameList.append(ip)
    sharpnessList = []
    ippath = os.path.join(folderloc,ip)
    img = Image.open(ippath).convert('LA')
    # to reduce the code running multiple times. 
    #this will ensure it will get initialized just once
    if size == 0 and len(lst)==0:
        size = img.size[0]
        lst = [(size*i)/8 for i in range(0,8)]
    #iterate over the image grid 
    for col in lst:
        for row in lst:
            area = (row,col,row+(size/8),col+(size/8))
            cropped_image = img.crop(area)
            val = sharpness(np.array(cropped_image.convert('L')))
            sharpnessList.append(val)
    sharpnessFull.append(sum(sharpnessList)/len(sharpnessList))

print("end iterating over input images -----------------")
t_fin = time.time()
t_diff = t_fin-t_ini
print("Total time taken = ",t_diff)

sharpness_norm = normalizeList(sharpnessFull)

plt.title(plot_title)
plt.xlabel('Image Index')
plt.ylabel('Norm Sharpness Value')
plt.xticks(rotation=45)
plt.plot(sharpness_norm,'.-')
plt.savefig(targetGraphNameWithExt,format = 'png')

print("Plot created successfully at ",targetGraphNameWithExt)